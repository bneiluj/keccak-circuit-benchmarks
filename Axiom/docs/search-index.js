var searchIndex = JSON.parse('{\
"halo2_base":{"doc":"","t":[3,13,3,3,13,4,17,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,12,12,12,12,12,2,2,2,2,0,0,0,12,4,3,3,3,13,3,13,6,13,3,6,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,8,4,17,13,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,10,11,11,10,11,11,10,11,12,12,10,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,16,3,3,8,4,13,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,10,11,11,12,11,12,12,10,11,11,12,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,10,5,5,5,5,5,5,5,5,5,5,5,10,0,11,5,5,5,10,5,5,5,5],"n":["AssignedValue","Constant","Context","ContextCell","Existing","QuantumCell","SKIP_FIRST_PASS","Witness","WitnessFraction","advice","advice_equality_constraints","assign_cell","assign_region","assign_region_last","assign_region_smart","assign_witnesses","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","cells_to_lookup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constant_equality_constraints","constrain_equal","context_id","context_id","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","gates","get","halo2_proofs","init","init","init","init","into","into","into","into","last","load_constant","load_witness","load_zero","new","offset","selector","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utils","value","value","value","vzip","vzip","vzip","vzip","witness_gen_only","zero_cell","0","0","0","0","GateChip","GateInstructions","RangeChip","RangeInstructions","builder","flex_gate","range","0","CircuitBuilderStage","FlexGateConfigParams","GateCircuitBuilder","GateThreadBuilder","Keygen","KeygenAssignments","Mock","MultiPhaseThreadBreakPoints","Prover","RangeCircuitBuilder","ThreadBreakPoints","assign_all","assign_threads_in","assigned_advices","assigned_constants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_points","break_points","builder","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","configure","configure","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_new_thread_id","init","init","init","init","init","init","into","into","into","into","into","into","k","keygen","keygen","keygen","main","mock","mock","mock","new","new_thread","num_advice_per_phase","num_fixed","num_lookup_advice_per_phase","prover","prover","prover","serialize","strategy","synthesize","synthesize","thread_count","threads","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unknown","use_unknown","vzip","vzip","vzip","vzip","vzip","vzip","without_witnesses","without_witnesses","witness_gen_only","BasicGateConfig","FlexGateConfig","GateChip","GateInstructions","GateStrategy","MAX_PHASE","Vertical","accumulated_product","add","and","assert_bit","assert_is_const","basic_gates","bits_to_indicator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","configure","configure","constants","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","div_unsafe","drop","drop","drop","drop","eq","field_element_cache","fmt","fmt","fmt","fmt","from","from","from","from","get_field_element","get_field_element","idx_to_indicator","init","init","init","init","inner_product","inner_product","inner_product_left_last","inner_product_left_last","inner_product_with_sums","inner_product_with_sums","into","into","into","into","is_equal","is_zero","lagrange_and_eval","max_rows","mul","mul_add","mul_not","neg","new","not","num_advice","num_to_bits","num_to_bits","or","or_and","or_and","partial_sums","pow_of_two","pow_of_two","pow_of_two","q_enable","select","select","select_by_indicator","select_from_idx","serialize","strategy","strategy","sub","sum","sum_products_with_coeff_and_var","sum_products_with_coeff_and_var","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","Gate","RangeChip","RangeConfig","RangeInstructions","RangeStrategy","Vertical","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_big_less_than_safe","check_less_than","check_less_than","check_less_than_safe","clone","clone","clone","clone_into","clone_into","clone_into","configure","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","div_mod","div_mod_var","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","gate","gate","gate","gate","get_last_bit","init","init","init","into","into","into","is_big_less_than_safe","is_less_than","is_less_than","is_less_than_safe","limb_bases","load_lookup_table","lookup","lookup_advice","lookup_bits","lookup_bits","lookup_bits","lookup_bits","new","q_lookup","range_check","range_check","strategy","strategy","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BigPrimeField","CurveAffineExt","ScalarField","batch_add","bigint_to_fe","biguint_to_fe","bit_length","compose","decompose","decompose_bigint","decompose_bigint_option","decompose_biguint","decompose_fe_to_u64_limbs","fe_to_bigint","fe_to_biguint","from_u64_digits","fs","into_coordinates","log2_ceil","modulus","power_of_two","to_u64_limbs","value_to_option","gen_srs","read_or_create_srs","read_params"],"q":["halo2_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::QuantumCell","","","","halo2_base::gates","","","","","","","halo2_base::gates::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::gates::flex_gate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::gates::range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::utils","","","","","","","","","","","","","","","","","","","","","","","halo2_base::utils::fs","",""],"d":["The object that you fetch from a context when you want to …","","A context should be thought of as a single thread of …","","","","","This is a guard for witness values assigned after pkey …","","this is the single column of advice cells exactly as they …","A pair of context cells, both assumed to be <code>advice</code>, that …","Push a <code>QuantumCell</code> onto the stack of advice cells to be …","Assigns multiple advice cells and the accompanying …","Calls <code>assign_region</code> and returns the last assigned cell","All indices in <code>gate_offsets</code>, <code>equality_offsets</code>, …","","","","","","","","","","","<code>cells_to_lookup</code> is a vector keeping track of all cells …","","","","","","","","","A pair of (constant, advice_cell) that must be constrained …","","","identifier to reference cells from this context later","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","one selector column accompanying each advice column, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper struct to auto-build a circuit from a …","","","","","","","A wrapper struct to auto-build a circuit from a …","","Assigns all advice and fixed cells, turns on selectors, …","Pure advice witness assignment in a single phase. Uses …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auto-calculate configuration parameters for the circuit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Threads for each challenge phase","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum number of phases halo2 currently supports","","","Copies a, b and constrains <code>a + b * 1 = out</code>","","Constrain x is 0 or 1.","","","assume bits has boolean values returns vec[idx] with vec[…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","To avoid Montgomery conversion in <code>F::from</code> for common small …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the inner product of <code>&lt;a, b&gt;</code>","","Returns the inner product of <code>&lt;a, b&gt;</code> and the last item of <code>a</code> …","Returns the inner product of <code>&lt;a, b&gt;</code> and the last item of <code>a</code> …","Returns a vector with the partial sums …","Returns a vector with the partial sums …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","given pairs <code>coords[i] = (x_i, y_i)</code>, let <code>f</code> be the unique …","","Copies a, b and constrains <code>0 + a * b = out</code>","a * b + c","(1 - a) * b = b - a * b","","","","","returns little-endian bit vectors","","","returns: a || (b &amp;&amp; c)","returns: a || (b &amp;&amp; c)","Returns the assignment trace where <code>output[i]</code> has the …","","","","","assumes sel is boolean returns a * sel + b * (1 - sel)","","Assumes for witness generation that only one element of …","","","","","Copies a, b and constrains <code>a + b * (-1) = out</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that <code>a</code> is in <code>[0, b)</code>.","","Warning: This may fail silently if a or b have more than …","Checks that <code>a</code> is in <code>[0, b)</code>.","","","","","","","","","","","","","","","Returns <code>(c, r)</code> such that <code>a = b * c + r</code>.","Returns <code>(c, r)</code> such that <code>a = b * c + r</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Assume <code>a</code> has been range checked already to <code>limb_bits</code> bits","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether <code>a</code> is in <code>[0, b)</code>.","Returns whether <code>a</code> is in <code>[0, b)</code>.","Warning: This may fail silently if a or b have more than …","Returns whether <code>a</code> is in <code>[0, b)</code>.","","","","<code>lookup_advice</code> are special advice columns only used for …","","","","","","","Constrain that <code>a</code> lies in the range [0, 2range_bits).","","","","","","","","","","","","","","","","","","","","","","","assume <code>|e|</code> less than modulus of F","assume <code>e</code> less than modulus of F","","Compute the represented value by a vector of values and a …","","","","","Assumes <code>bit_len</code> &lt;= 64","","","","","Unlike the <code>Coordinates</code> trait, this just returns the raw …","","","","Returns the base <code>2^bit_len</code> little endian representation of …","","","",""],"i":[0,3,0,0,3,0,0,3,3,2,2,2,2,2,2,2,3,9,6,2,3,9,6,2,6,2,3,9,6,2,3,9,6,2,2,2,9,2,3,9,6,2,3,9,6,2,3,9,6,2,3,9,6,2,3,3,9,6,2,0,2,0,3,9,6,2,3,9,6,2,2,2,2,2,2,9,2,3,9,6,2,3,9,6,2,3,9,6,2,3,9,6,2,0,3,6,6,3,9,6,2,2,2,53,54,55,56,0,0,0,0,0,0,0,26,0,0,0,0,27,0,27,0,27,0,0,19,0,22,22,22,19,24,25,26,27,22,19,24,25,26,27,22,25,25,22,19,24,25,26,27,22,19,24,25,26,27,19,25,26,22,19,22,19,24,25,26,27,22,19,24,25,26,27,24,22,19,24,25,26,27,22,19,24,25,26,27,22,19,24,25,26,27,19,22,19,24,25,26,27,22,19,24,25,26,27,24,19,25,26,19,19,25,26,19,19,24,24,24,19,25,26,24,24,25,26,19,19,22,19,24,25,26,27,22,19,24,25,26,27,22,19,24,25,26,27,22,19,24,25,26,27,19,19,22,19,24,25,26,27,25,26,19,0,0,0,0,0,0,33,57,57,57,57,57,20,57,33,34,20,35,33,34,20,35,33,34,20,35,33,34,20,35,34,20,20,35,33,34,20,35,33,34,20,35,33,57,33,34,20,35,33,35,33,34,20,35,33,34,20,35,57,35,57,33,34,20,35,57,35,57,35,57,35,33,34,20,35,57,57,57,20,57,57,57,57,35,57,20,57,35,57,57,35,57,57,35,35,34,57,35,57,57,33,57,35,57,57,57,35,33,34,20,35,33,34,20,35,33,34,20,35,33,34,20,35,34,33,34,20,35,58,0,0,0,0,42,42,43,41,42,43,41,58,58,41,58,42,43,41,42,43,41,43,41,42,43,41,42,43,41,58,58,42,43,41,42,42,43,41,42,43,41,58,41,43,41,58,42,43,41,42,43,41,58,58,41,58,41,43,43,43,58,43,41,41,41,43,58,41,58,41,42,43,41,42,43,41,42,43,41,42,43,41,42,43,41,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,45,0,59,0,0,0,1,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[4,[[3,[1]]]]]],[[[2,[1]],5,5]],[[[2,[1]],5,5],[[6,[1]]]],[[[2,[1]],5,5,5,5]],[[[2,[1]],5],[[7,[[6,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[3,[[0,[8,1]]]]],[[3,[[0,[8,1]]]]]],[9,9],[[[6,[[0,[8,1]]]]],[[6,[[0,[8,1]]]]]],[[[2,[[0,[8,1]]]]],[[2,[[0,[8,1]]]]]],[[]],[[]],[[]],[[]],0,[[[2,[1]],6,6]],0,0,[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[[3,[[0,[11,1]]]],12],13],[[9,12],13],[[[6,[[0,[11,1]]]],12],13],[[[2,[[0,[11,1]]]],12],13],[[]],[[[6,[1]]],[[3,[1]]]],[[]],[[]],[[]],0,[[[2,[1]],14],[[6,[1]]]],0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[[2,[1]]],[[15,[[6,[1]]]]]],[[[2,[1]],1],[[6,[1]]]],[[[2,[1]],1],[[6,[1]]]],[[[2,[1]]],[[6,[1]]]],[[16,10],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[[[3,[1]]]],[[[6,[1]]]],0,[[]],[[]],[[]],[[]],[[[2,[1]]],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[19,[1]],20,21,[22,[1]]],[[22,[1]]]],[[10,[7,[[2,[1]]]],20,21,23]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[22,[[0,[8,1]]]]],[[22,[[0,[8,1]]]]]],[[[19,[[0,[8,1]]]]],[[19,[[0,[8,1]]]]]],[24,24],[[[25,[[0,[8,1]]]]],[[25,[[0,[8,1]]]]]],[[[26,[[0,[8,1]]]]],[[26,[[0,[8,1]]]]]],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[1]],10,[15,[10]]],24],[28,[[20,[1]]]],[28],[[],[[22,[[0,[29,1]]]]]],[[],[[19,[[0,[29,1]]]]]],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[],[[17,[24]]]],[10],[10],[10],[10],[10],[10],[[[22,[[0,[11,1]]]],12],13],[[[19,[[0,[11,1]]]],12],13],[[24,12],13],[[[25,[[0,[11,1]]]],12],13],[[[26,[[0,[11,1]]]],12],13],[[27,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[1]]],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[19,[1]]]],[[[19,[1]]],[[25,[1]]]],[[[19,[1]]],[[26,[1]]]],[[[19,[1]],10],2],[[],[[19,[1]]]],[[[19,[1]]],[[25,[1]]]],[[[19,[1]]],[[26,[1]]]],[16,[[19,[1]]]],[[[19,[1]],10],2],0,0,0,[[],[[19,[1]]]],[[[19,[1]],30],[[25,[1]]]],[[[19,[1]],30],[[26,[1]]]],[24,17],0,[[[25,[1]],[31,[1]]],[[17,[32]]]],[[[26,[1]],[31,[1]]],[[17,[32]]]],[[[19,[1]]],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[19,[1]],16],[[19,[1]]]],[[[19,[1]]],16],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[1]]],[[25,[1]]]],[[[26,[1]]],[[26,[1]]]],[[[19,[1]]],16],0,0,0,0,0,0,0,[[2,5,5],[[7,[6]]]],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]]],6],[[2,6]],[[2,6]],0,[2,[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[[[34,[[0,[8,1]]]]],[[34,[[0,[8,1]]]]]],[[[20,[[0,[8,1]]]]],[[20,[[0,[8,1]]]]]],[[[35,[[0,[8,1]]]]],[[35,[[0,[8,1]]]]]],[[]],[[]],[[]],[[]],[[28,33,36],[[34,[1]]]],[[28,33,10,10],[[20,[1]]]],0,[[],[[35,[1]]]],[10],[10],[10],[10],[10],[10],[10],[10],[[],[[17,[33]]]],[[2,[4,[3]],[4,[3]]],6],[10],[10],[10],[10],[[33,33],16],0,[[33,12],13],[[[34,[[0,[11,1]]]],12],13],[[[20,[[0,[11,1]]]],12],13],[[[35,[[0,[11,1]]]],12],13],[[]],[[]],[[]],[[]],[37],[[[35,[1]],37],1],[[2,[4,[3]],10],[[7,[6]]]],[[],10],[[],10],[[],10],[[],10],[[2,5,5],6],[[[35,[1]],2,5,5],[[6,[1]]]],[[2,5,5]],[[[35,[1]],2,5,5]],[[2,5,5],[[39,[38]]]],[[[35,[1]],2,5,5],[[39,[38]]]],[[]],[[]],[[]],[[]],[[2,[4,[3]],[4,[3]]],6],[[2,6],6],[[2,6]],0,[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]]],6],[33,[[35,[1]]]],[[2,[4,[3]]],6],0,[[2,6,10],[[7,[6]]]],[[[35,[1]],2,[6,[1]],10],[[7,[[6,[1]]]]]],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[[35,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],[4,[[3,[1]]]]],[[6,[1]]]],[[2,5],[[39,[38]]]],[[]],[[[35,[1]]]],0,0,[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[[35,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],[4,[[3,[1]]]]],[[6,[1]]]],[[2,5,5],6],[[2,5,[4,[3]]],6],[33,17],[[],33],[[[35,[1]]],33],[[2,[4,[3]],[4,[3]]],6],[[2,5],6],[[2,5,3],6],[[[35,[1]],2,5,[3,[1]]],[[6,[1]]]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[2,6,40]],[[2,[4,[3]],[4,[3]],10]],[[[41,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],10]],[[2,6,37]],[42,42],[[[43,[[0,[8,1]]]]],[[43,[[0,[8,1]]]]]],[[[41,[[0,[8,1]]]]],[[41,[[0,[8,1]]]]]],[[]],[[]],[[]],[[28,42,10,10,10],[[43,[1]]]],[10,[[41,[1]]]],[10],[10],[10],[10],[10],[10],[[2,[4,[3]],[4,[40]],10]],[[2,[4,[3]],[4,[3]],10,10]],[10],[10],[10],[[42,42],16],[[42,12],13],[[[43,[[0,[11,1]]]],12],13],[[[41,[[0,[11,1]]]],12],13],[[]],[[]],[[]],[[]],[[[41,[1]]]],0,0,[[2,6,10],6],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[2,6,40],6],[[2,[4,[3]],[4,[3]],10],6],[[[41,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],10],[[6,[1]]]],[[2,6,37],6],0,[[[43,[1]]],[[17,[32]]]],0,0,[[],10],[[[43,[1]]],10],[[[41,[1]]],10],0,[[42,10],[[41,[1]]]],0,[[2,6,10]],[[[41,[1]],2,[6,[1]],10]],[[],42],[[[41,[1]]],42],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,[[10,10]],[44,45],[40,45],[37,10],[[[7,[40]],10],40],[[10,10],[[7,[45]]]],[[44,10,10],[[7,[45]]]],[[[46,[44]],10,10],[[7,[[46,[45]]]]]],[[40,10,10],[[7,[45]]]],[[10,10],[[7,[37]]]],[[],44],[[],40],[[]],0,[[]],[37,10],[[],40],[10,45],[[10,10],[[7,[37]]]],[46,15],[47,[[49,[48]]]],[[47,50],[[52,[51]]]],[47,[[49,[48]]]]],"p":[[8,"ScalarField"],[3,"Context"],[4,"QuantumCell"],[8,"Into"],[8,"IntoIterator"],[3,"AssignedValue"],[3,"Vec"],[8,"Clone"],[3,"ContextCell"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"isize"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"GateThreadBuilder"],[3,"FlexGateConfig"],[3,"Region"],[3,"KeygenAssignments"],[6,"ThreadBreakPoints"],[3,"FlexGateConfigParams"],[3,"GateCircuitBuilder"],[3,"RangeCircuitBuilder"],[4,"CircuitBuilderStage"],[3,"ConstraintSystem"],[8,"Default"],[6,"MultiPhaseThreadBreakPoints"],[8,"Layouter"],[4,"Error"],[4,"GateStrategy"],[3,"BasicGateConfig"],[3,"GateChip"],[15,"u8"],[15,"u64"],[8,"Iterator"],[3,"Box"],[3,"BigUint"],[3,"RangeChip"],[4,"RangeStrategy"],[3,"RangeConfig"],[3,"BigInt"],[8,"BigPrimeField"],[3,"Value"],[15,"u32"],[3,"Bn256"],[3,"ParamsKZG"],[8,"Fn"],[8,"CurveAffine"],[8,"ParamsProver"],[13,"Existing"],[13,"Witness"],[13,"WitnessFraction"],[13,"Constant"],[8,"GateInstructions"],[8,"RangeInstructions"],[8,"CurveAffineExt"]]},\
"halo2_ecc":{"doc":"","t":[0,0,0,0,2,0,4,3,3,3,3,3,13,0,11,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,0,11,12,0,0,0,0,0,11,0,0,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,11,11,11,11,11,0,11,11,11,0,11,3,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,5,11,5,5,11,11,5,5,5,11,11,5,11,11,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,0,11,12,0,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,5,11,5,11,11,0,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,12,12,5,5,5,16,8,8,3,16,16,4,18,16,25,8,16,8,13,16,10,10,10,11,11,11,11,10,10,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,10,10,10,11,11,0,0,0,11,11,11,10,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,11,11,12,11,11,11,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,17,6],"n":["bigint","bn254","ecc","fields","halo2_base","secp256k1","BigIntStrategy","CRTInteger","FixedAssignedCRTInteger","FixedCRTInteger","FixedOverflowInteger","OverflowInteger","Simple","add_no_carry","assign","assign","big_is_equal","big_is_zero","big_less_than","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carry_mod","check_carry_mod_to_zero","check_carry_to_zero","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","construct","construct","construct","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_native","from_native","init","init","init","init","init","init","into","into","into","into","into","into","limb_fixed_cells","limbs","limbs","limbs","max_limb_bits","mul_no_carry","native","native","negative","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select_by_indicator","select_by_indicator","sub","sub_no_carry","to_bigint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncation","truncation","truncation","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","assign","crt","assign","crt","wrapper","assign","crt","positive","assign","crt","crt","truncate","crt","truncate","assign","assign","crt","assign","crt","assign","crt","assign","crt","assign","crt","assign","crt","Fp12Chip","Fp2Chip","FpChip","FpPoint","FqPoint","cyclotomic_compress","cyclotomic_decompress","cyclotomic_pow","cyclotomic_square","easy_part","final_exp","final_exp","frobenius_map","hard_part_BN","pairing","pow","PairingChip","borrow","borrow_mut","deref","deref_mut","drop","final_exp","fp12_multiply_with_line_equal","fp12_multiply_with_line_unequal","fp_chip","from","init","into","load_private_g1","load_private_g2","miller_loop","miller_loop_BN","multi_miller_loop","multi_miller_loop_BN","neg_twisted_frobenius","new","pairing","sparse_fp12_multiply","sparse_line_function_equal","sparse_line_function_unequal","try_from","try_into","twisted_frobenius","type_id","vzip","BaseFieldEccChip","EcPoint","EccChip","add_unequal","assert_equal","assert_is_on_curve","assign_constant_point","assign_point","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","construct","deref","deref","deref_mut","deref_mut","double","drop","drop","ec_add_unequal","ec_double","ec_double_and_add_unequal","ec_select","ec_select_by_indicator","ec_select_from_bits","ec_sub_unequal","ecdsa","field_chip","field_chip","fixed_base","fixed_base_msm","fixed_base_msm_in","fixed_base_scalar_mult","fmt","fmt","from","from","get_naf","init","init","into","into","is_equal","is_on_curve","is_on_curve_or_infinity","load_private","load_random_point","load_random_point","multi_scalar_multiply","negate","new","pippenger","scalar_mult","scalar_multiply","select","sub_unequal","sum","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","variable_base_msm","variable_base_msm_in","vzip","vzip","x","x","y","y","ecdsa_verify_no_pubkey_check","FixedEcPoint","assign","borrow","borrow_mut","clone","clone_into","construct","deref","deref_mut","drop","fmt","from","from_curve","init","into","msm","msm_par","scalar_multiply","to_owned","try_from","try_into","type_id","vzip","x","y","multi_exp","multi_exp_par","multi_product","ConstantType","FieldChip","FieldExtConstructor","FieldExtPoint","FieldPoint","FieldType","FpStrategy","PRIME_FIELD_NUM_BITS","Point","PrimeField","PrimeFieldChip","RangeChip","Selectable","Simple","WitnessType","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow","borrow_mut","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone","clone_into","clone_into","coeffs","coeffs","construct","deref","deref","deref_mut","deref_mut","deserialize","divide","drop","drop","enforce_less_than","fe_to_constant","fe_to_witness","fmt","fmt","fp","fp12","fp2","from","from","gate","get_assigned_value","init","init","into","into","is_equal","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bases","limb_bits","limb_mask","load_constant","load_private","mul","mul_no_carry","native_modulus","neg_divide","negate","new","num_limbs","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select_by_indicator","serialize","sub_no_carry","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BaseFieldChip","FpChip","FpConfig","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","deref","deref_mut","drop","enforce_less_than","enforce_less_than_p","fe_to_constant","fe_to_witness","fmt","from","get_assigned_value","init","into","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_base_big","limb_bases","limb_bases","limb_bits","limb_bits","limb_mask","limb_mask","load_constant","load_private","mul_no_carry","native_modulus","native_modulus","negate","new","num_limbs","num_limbs","num_limbs_bits","num_limbs_log2_ceil","p","p_limbs","p_native","range","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select_by_indicator","sub_no_carry","to_owned","try_from","try_into","type_id","vzip","Fp12Chip","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","conjugate","cyclotomic_compress","cyclotomic_decompress","cyclotomic_pow","cyclotomic_square","deref","deref_mut","drop","easy_part","enforce_less_than","fe_to_constant","fe_to_witness","final_exp","fmt","fp2_mul_no_carry","fp_chip","frobenius_map","from","get_assigned_value","hard_part_BN","init","into","is_equal","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bits","load_constant","load_private","mul_no_carry","mul_no_carry_w6","native_modulus","negate","new","pow","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","sub_no_carry","to_owned","try_from","try_into","type_id","vzip","Fp2Chip","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","conjugate","deref","deref_mut","drop","enforce_less_than","fe_to_constant","fe_to_witness","fmt","fp_chip","fp_mul_no_carry","from","get_assigned_value","init","into","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bits","load_constant","load_private","mul_no_carry","native_modulus","neg_conjugate","negate","new","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","sub_no_carry","to_owned","try_from","try_into","type_id","vzip","FpChip","FqChip","SECP_B","Secp256k1Chip"],"q":["halo2_ecc","","","","","","halo2_ecc::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::bigint::add_no_carry","","halo2_ecc::bigint::big_is_equal","","","halo2_ecc::bigint::big_is_zero","","","halo2_ecc::bigint::big_less_than","halo2_ecc::bigint::carry_mod","halo2_ecc::bigint::check_carry_mod_to_zero","halo2_ecc::bigint::check_carry_to_zero","halo2_ecc::bigint::mul_no_carry","","halo2_ecc::bigint::negative","halo2_ecc::bigint::scalar_mul_and_add_no_carry","","halo2_ecc::bigint::scalar_mul_no_carry","","halo2_ecc::bigint::select","","halo2_ecc::bigint::select_by_indicator","","halo2_ecc::bigint::sub","","halo2_ecc::bigint::sub_no_carry","","halo2_ecc::bn254","","","","","","","","","","","","","","","","halo2_ecc::bn254::pairing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::ecc::ecdsa","halo2_ecc::ecc::fixed_base","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::ecc::pippenger","","","halo2_ecc::fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp12","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::secp256k1","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input: a BigInteger <code>value</code>, Output: the <code>FixedOverflowInteger</code>…","Input: a BigInteger <code>value</code>, Output: the <code>FixedCRTInteger</code> …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","only use case is when coeffs has only a single 1, rest are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given OverflowInteger’s <code>a</code> and <code>b</code> of the same shape, …","","","","","assume you know that the limbs of <code>a</code> are all in [0, …","","","","","","","","compute a * c + b = b + a * c","compute a * c + b = b + a * c","","","","","only use case is when coeffs has only a single 1, rest are …","only use case is when coeffs has only a single 1, rest are …","Should only be called on integers a, b in proper …","","","","","","","","","in = g0 + g2 w + g4 w^2 + g1 w^3 + g3 w^4 + g5 w^5 where …","Input:","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Assumes that P.x != Q.x If <code>is_strict == true</code>, then …","","","","Does not constrain witness to lie on curve","","","","","","","","","","","","","","","","","For optimization reasons, we assume that if you are using …","","Implements: computing 2P + Q = P + Q + P for P = (x0, y0), …","","","","For optimization reasons, we assume that if you are using …","","","","","","<code>clump_factor = 0</code> means auto-calculate","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Assumes that P.x != Q.x Otherwise will panic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Currently does not support if the final answer is actually …","Multi-thread witness generation for multi-scalar …","","","Common functionality for finite field chips","","","","","","","","","","","","","","output: <code>a + c</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","a * c + b","a * c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represent Fp12 point as FqPoint with degree = 12 …","","","","","","","","","","","in = g0 + g2 w + g4 w^2 + g1 w^3 + g3 w^4 + g5 w^5 where …","Input:","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","multiply (a0 + a1 * u) * (XI0 + u) without carry","","","User must construct an <code>FpChip</code> first using a config. This …","","","","","","","","","","","","Represent Fp2 point as <code>FieldExtPoint</code> with degree = 2 …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","User must construct an <code>FpChip</code> first using a config. This …","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,9,0,2,6,0,0,0,9,5,2,8,6,12,9,5,2,8,6,12,0,0,0,9,5,2,8,6,12,9,5,2,8,6,12,5,2,8,6,9,9,5,2,8,6,12,9,5,2,8,6,12,9,5,2,8,6,12,9,5,9,5,2,8,6,12,9,5,2,8,6,12,2,6,9,5,2,8,6,12,9,5,2,8,6,12,12,8,5,2,5,0,8,8,0,0,0,0,0,2,0,0,2,9,5,2,8,6,12,8,6,12,9,5,2,8,6,12,9,5,2,8,6,12,9,5,2,8,6,12,8,6,12,9,5,2,8,6,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,25,25,25,0,25,25,25,0,25,0,29,29,29,29,29,29,0,0,29,29,29,29,29,29,29,0,29,0,0,29,29,0,0,0,29,29,0,29,29,0,0,0,35,35,35,35,35,32,35,32,35,32,35,32,35,32,32,35,32,35,35,32,35,0,0,0,0,0,0,0,0,35,35,0,35,35,35,32,35,32,35,0,32,35,32,35,35,0,35,35,0,35,0,35,35,0,35,0,35,35,35,32,35,32,35,32,35,32,35,35,35,32,35,32,32,32,32,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,45,45,45,45,45,45,45,0,0,0,38,0,0,0,38,38,0,38,54,0,0,38,0,47,38,38,38,38,26,47,26,47,38,38,26,47,26,47,55,26,26,26,47,26,47,47,38,26,47,38,38,38,26,47,0,0,0,26,47,38,38,26,47,26,47,38,38,38,38,38,39,38,39,38,38,38,38,38,38,38,55,39,38,38,38,38,54,54,47,38,26,47,26,47,26,47,26,47,26,47,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3,4],[[5,[1]]]],[[[6,[1]],3,4,7],[[8,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[9,9],[[[5,[[0,[10,11]]]]],[[5,[[0,[10,11]]]]]],[[[2,[[0,[10,11]]]]],[[2,[[0,[10,11]]]]]],[[[8,[[0,[10,11]]]]],[[8,[[0,[10,11]]]]]],[[[6,[[0,[10,11]]]]],[[6,[[0,[10,11]]]]]],[[[12,[[0,[10,11]]]]],[[12,[[0,[10,11]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[[13,[11]]]],4],[[5,[11]]]],[[[14,[1]]],[[2,[1]]]],[[[5,[11]],[13,[11]],15],[[8,[11]]]],[[[2,[1]],7],[[6,[1]]]],[[],9],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[9,9],16],[[3,17,17],[[13,[11]]]],[[9,18],19],[[[5,[[0,[20,11]]]],18],19],[[[2,[[0,[20,11]]]],18],19],[[[8,[[0,[20,11]]]],18],19],[[[6,[[0,[20,11]]]],18],19],[[[12,[[0,[20,11]]]],18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[7,4,4],[[2,[1]]]],[[7,4,4],[[6,[1]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[8,[11]]]],0,0,0,0,[[[8,[11]]],13],0,0,0,0,0,0,[[3,4],[[5,[1]]]],0,0,[[[2,[1]],4],7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[3,5,5],[[5,[11]]]],[[3,8,8],[[8,[11]]]],[[3,5,5],[[13,[11]]]],[[3,8,8],[[13,[11]]]],[[3,8,8],[[13,[11]]]],[[3,5],[[13,[11]]]],[[3,8],[[13,[11]]]],[[3,5],[[13,[11]]]],[[3,5,5,4,11],[[13,[11]]]],[[3,8,4,15,1,4,15],[[8,[1]]]],[[3,8,4,15,1,4,15]],[[3,[5,[1]],4,1,15]],[[3,8,8,4],[[8,[11]]]],[[3,5,5,4],[[5,[11]]]],[[3,[5,[11]]],[[5,[11]]]],[[3,5,5,11,4],[[5,[11]]]],[[3,8,8,23],[[8,[11]]]],[[3,[5,[11]],11,4],[[5,[11]]]],[[3,8,23],[[8,[11]]]],[[3,[5,[11]],[5,[11]],[13,[11]]],[[5,[11]]]],[[3,8,8,[13,[11]]],[[8,[11]]]],[3,[[5,[11]]]],[3,[[8,[11]]]],[[3,5,5,4,11]],[[3,8,8,4,11]],[[3,5,5],[[5,[11]]]],[[3,8,8],[[8,[11]]]],0,0,0,0,0,[[[25,[24]],26],[[14,[[26,[[27,[24]]]]]]]],[[[25,[24]],3,[14,[[26,[[27,[24]]]]]]],[[26,[[27,[24]]]]]],[[[25,[24]],3,[26,[[27,[24]]]],[14,[28]]],[[26,[[27,[24]]]]]],[[[25,[24]],3],[[14,[[26,[[27,[24]]]]]]]],[[[25,[24]],3]],0,[[[25,[24]],3]],[[[25,[24]],3,4]],[[[25,[24]],3]],0,[[[25,[24]],3,[14,[28]]]],0,[[]],[[]],[4],[4],[4],[[[29,[24]],3,30],[[30,[24]]]],[[31,3,30,32,32],[[30,[24]]]],[[31,3,30,32],[[30,[24]]]],0,[[]],[[],4],[[]],[[[29,[24]],3,33],[[32,[24,[27,[24]]]]]],[[[29,[24]],3,34],[[32,[24,[26,[[27,[24]]]]]]]],[[[29,[24]],3,32,32],[[30,[24]]]],[[35,3,32,32],[[30,[24]]]],[[[29,[24]],3,14],[[30,[24]]]],[[35,3,14],[[30,[24]]]],[[35,3,32,30,30],[[32,[24,[30,[24]]]]]],[36,[[29,[24]]]],[[[29,[24]],3,32,32],[[30,[24]]]],[[31,3,30,14],[[26,[[27,[24]]]]]],[[31,3,32,32],[[14,[[37,[[30,[24]]]]]]]],[[31,3,32],[[14,[[37,[[30,[24]]]]]]]],[[],21],[[],21],[[35,3,32,30,30],[[32,[24,[30,[24]]]]]],[[],22],[[]],0,0,0,[[[35,[24,[38,[24]]]],3,32,32,16],[[32,[24]]]],[[[35,[24,[38,[24]]]],3,32,32]],[[[35,[24,[38,[24]]]],3,32]],[[[35,[24,[38,[24]]]],3],[[32,[24]]]],[[[35,[24,[38,[24]]]],3],[[32,[24]]]],[[]],[[]],[[]],[[]],[[[32,[24,10]]],[[32,[24,10]]]],[[[35,[[0,[10,24]],[0,[10,[38,[[0,[10,24]]]]]]]]],[[35,[[0,[10,24]],[0,[10,[38,[[0,[10,24]]]]]]]]]],[[]],[[]],[[],[[32,[24]]]],[4],[4],[4],[4],[[[35,[24,[38,[24]]]],3,32],[[32,[24]]]],[4],[4],[[3,32,32,16],[[32,[24]]]],[[3,32],[[32,[24]]]],[[3,32,32,16],[[32,[24]]]],[[3,32,32,[13,[24]]],[[32,[24]]]],[3,[[32,[24]]]],[3,[[32,[24]]]],[[3,32,32,16],[[32,[24]]]],0,[[[35,[24,[38,[24]]]]]],0,0,[[[35,[24,[39,[24]]]],40,[14,[[14,[[13,[24]]]]]],4],[[32,[24]]]],[[[35,[24,[39,[24]]]],40,[14,[[14,[[13,[24]]]]]],4,4,4],[[32,[24]]]],[[[35,[24,[39,[24]]]],3,[14,[[13,[24]]]],4,4],[[32,[24]]]],[[[32,[[0,[20,24]],20]],18],19],[[[35,[[0,[20,24]],[0,[20,[38,[[0,[20,24]]]]]]]],18],19],[[]],[[]],[[[14,[28]]],[[14,[41]]]],[[],4],[[],4],[[]],[[]],[[[35,[24,[38,[24]]]],3,32,32],[[13,[24]]]],[[3,32]],[[[35,[24,[38,[24]]]],3,32],[[13,[24]]]],[[[35,[24,[38,[24]]]],3],[[32,[24]]]],[3,32],[[[35,[24,[38,[24]]]],3],[[32,[24]]]],[[3,[14,[[14,[[13,[24]]]]]],4,4],[[32,[24]]]],[[[35,[24,[38,[24]]]],3,32],[[32,[24]]]],[[],[[35,[24,[38,[24]]]]]],0,[[[35,[24,[38,[24]]]],3,32,[14,[[13,[24]]]],4,4],[[32,[24]]]],[[3,32,[14,[[13,[24]]]],4,4],[[32,[24]]]],[[[35,[24,[38,[24]]]],3,32,32,[13,[24]]],[[32,[24]]]],[[[35,[24,[38,[24]]]],3,32,32,16],[[32,[24]]]],[[[35,[24,[38,[24]]]],3,42],[[32,[24]]]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[[35,[24,[38,[24]]]],40,[14,[[14,[[13,[24]]]]]],4],[[32,[24]]]],[[[35,[24,[38,[24]]]],40,[14,[[14,[[13,[24]]]]]],4,4,4],[[32,[24]]]],[[]],[[]],[[[32,[24]]]],0,[[[32,[24]]]],0,[[43,3,32,8,8,8,4,4],[[13,[24]]]],0,[[[45,[24,44]],3],[[32,[24]]]],[[]],[[]],[[[45,[[0,[10,24]],[0,[10,46]]]]],[[45,[[0,[10,24]],[0,[10,46]]]]]],[[]],[[[6,[24]],[6,[24]]],[[45,[24,44]]]],[4],[4],[4],[[[45,[[0,[20,24]],[0,[20,46]]]],18],19],[[]],[[44,4,4],[[45,[24,44]]]],[[],4],[[]],[[35,3,[14,[[14,[13]]]],4,4],32],[[35,40,[14,[[14,[13]]]],4,4,4],32],[[3,[14,[13]],4,4],32],[[]],[[],21],[[],21],[[],22],[[]],0,0,[[3,[14,[[14,[[13,[24]]]]]],4,4],[[32,[24]]]],[[40,[14,[[14,[[13,[24]]]]]],4,4,4],[[32,[24]]]],[[3,4]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3],[3],[3],[[]],[[]],[[]],[[]],[3],[3],[[[26,[[0,[10,10,20]]]]],[[26,[[0,[10,10,20]]]]]],[47,47],[[]],[[]],[[],14],0,[[[14,[[0,[10,20]]]]],[[26,[[0,[10,20]]]]]],[4],[4],[4],[4],[[],[[21,[47]]]],[3],[4],[4],[3],[[]],[[]],[[[26,[[0,[20,10,20]]]],18],19],[[47,18],19],0,0,0,[[]],[[]],[[]],[[]],[[],4],[[],4],[[]],[[]],[3,13],[3,13],[3,13],[3,13],[3,13],[[]],[[],4],[[],7],[3],[3],[3],[3],[[],7],[3],[3],[[]],[[],4],[[]],[[3,4]],[[3,23]],[[3,23]],[[3,13]],[3],[47,21],[3],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[]],[[]],0,0,0,[[[43,[24,24]],3,8,7],[[8,[24]]]],[[[43,[24,24]],3,8,8],[[8,[24]]]],[[[43,[24,24]],3]],[[]],[[]],[[[43,[24,24]],3,8],[[8,[24]]]],[[[43,[24,24]],3,8]],[[[43,[[0,[10,24]],[0,[10,24]]]]],[[43,[[0,[10,24]],[0,[10,24]]]]]],[[]],[4],[4],[4],[[[43,[24,24]],3]],[[[43,[24,24]],3,8]],[24,7],[[],15],[[[43,[[0,[20,24]],[0,[20,24]]]],18],19],[[]],[[[43,[24,24]],8],24],[[],4],[[]],[[[43,[24,24]],3],[[13,[24]]]],[[[43,[24,24]],3,8],[[13,[24]]]],[[[43,[24,24]],3,8],[[13,[24]]]],[[[43,[24,24]],3,8],[[13,[24]]]],0,[[[43,[24,24]]]],0,[[[43,[24,24]]],4],0,[[[43,[24,24]]],7],0,[[[43,[24,24]],3,7],[[8,[24]]]],[[[43,[24,24]],3,15],[[8,[24]]]],[[[43,[24,24]],3,8,8],[[8,[24]]]],[[[43,[24,24]]],7],0,[[[43,[24,24]],3,8],[[8,[24]]]],[[48,4,4],[[43,[24,24]]]],[[[43,[24,24]]],4],0,0,0,0,0,0,[[[43,[24,24]]]],0,[[[43,[24,24]],3,8,4]],[[[43,[24,24]],3,8,8,23],[[8,[24]]]],[[[43,[24,24]],3,8,23],[[8,[24]]]],[[[43,[24,24]],3,8,8,[13,[24]]],[[8,[24]]]],[[[43,[24,24]],3],[[8,[24]]]],[[[43,[24,24]],3,8,8],[[8,[24]]]],[[]],[[],21],[[],21],[[],22],[[]],0,[[49,3]],[[49,3]],[[49,3]],[[]],[[]],[[49,3]],[[49,3]],[[[49,[[0,[10,24]],[0,[10,[39,[[0,[10,24]]]]]],[0,[10,50]]]]],[[49,[[0,[10,24]],[0,[10,[39,[[0,[10,24]]]]]],[0,[10,50]]]]]],[[]],[[49,3,26],26],[[[49,[24,[43,[24,51]],52]],26],[[14,[[26,[[27,[24]]]]]]]],[[[49,[24,[43,[24,51]],52]],3,[14,[[26,[[27,[24]]]]]]],[[26,[[27,[24]]]]]],[[[49,[24,[43,[24,51]],52]],3,[26,[[27,[24]]]],[14,[28]]],[[26,[[27,[24]]]]]],[[[49,[24,[43,[24,51]],52]],3],[[14,[[26,[[27,[24]]]]]]]],[4],[4],[4],[[[49,[24,[43,[24,51]],52]],3]],[[49,3]],[[]],[[],[[14,[15]]]],[[[49,[24,[43,[24,51]],52]],3]],[[[49,[[0,[20,24]],[0,[20,[39,[[0,[20,24]]]]]],[0,[20,50]]]],18],19],[[49,3,26,26],26],0,[[[49,[24,[43,[24,51]],52]],3,4]],[[]],[49],[[[49,[24,[43,[24,51]],52]],3]],[[],4],[[]],[[49,3],13],[[49,3],13],[[49,3],13],[[49,3],13],[[49,3],13],[49,4],[[49,3]],[[49,3,[14,[15]]]],[[49,3]],[[3,26],26],[49,7],[[49,3]],[[],49],[[[49,[24,[43,[24,51]],52]],3,[14,[28]]]],[49],[[49,3,4]],[[49,3,23]],[[49,3,23]],[[49,3]],[[]],[[],21],[[],21],[[],22],[[]],0,[[53,3]],[[53,3]],[[53,3]],[[]],[[]],[[53,3]],[[53,3]],[[[53,[[0,[10,24]],[0,[10,[39,[[0,[10,24]]]]]],[0,[10,50]]]]],[[53,[[0,[10,24]],[0,[10,[39,[[0,[10,24]]]]]],[0,[10,50]]]]]],[[]],[[53,3,26],26],[4],[4],[4],[[53,3]],[[]],[[],[[14,[15]]]],[[[53,[[0,[20,24]],[0,[20,[39,[[0,[20,24]]]]]],[0,[20,50]]]],18],19],0,[[53,3,26],26],[[]],[53],[[],4],[[]],[[53,3],13],[[53,3],13],[[53,3],13],[[53,3],13],[53,4],[[53,3]],[[53,3,[14,[15]]]],[[53,3]],[53,7],[[53,3,26],26],[[53,3]],[[],53],[53],[[53,3,4]],[[53,3,23]],[[53,3,23]],[[53,3,26,26,13],26],[[53,3]],[[]],[[],21],[[],21],[[],22],[[]],0,0,0,0],"p":[[8,"BigPrimeField"],[3,"FixedOverflowInteger"],[3,"Context"],[15,"usize"],[3,"OverflowInteger"],[3,"FixedCRTInteger"],[3,"BigUint"],[3,"CRTInteger"],[4,"BigIntStrategy"],[8,"Clone"],[8,"ScalarField"],[3,"FixedAssignedCRTInteger"],[3,"AssignedValue"],[3,"Vec"],[3,"BigInt"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Result"],[3,"TypeId"],[15,"i64"],[25,"PrimeField"],[6,"Fp12Chip"],[3,"FieldExtPoint"],[6,"FpPoint"],[15,"u64"],[3,"PairingChip"],[6,"FqPoint"],[6,"Fp2Chip"],[3,"EcPoint"],[3,"G1Affine"],[3,"G2Affine"],[3,"EccChip"],[6,"FpChip"],[4,"Option"],[8,"FieldChip"],[8,"PrimeFieldChip"],[3,"Mutex"],[15,"i8"],[8,"Iterator"],[3,"FpChip"],[8,"CurveAffineExt"],[3,"FixedEcPoint"],[8,"CurveAffine"],[4,"FpStrategy"],[3,"RangeChip"],[3,"Fp12Chip"],[8,"Field"],[3,"Fq"],[3,"Fq12"],[3,"Fp2Chip"],[8,"Selectable"],[8,"FieldExtConstructor"]]},\
"zkevm_keccak":{"doc":"The zkEVM keccak circuit implementation, with some minor …","t":[2,14,14,0,0,14,14,3,3,3,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,12,11,11,11,12,5,5,12,11,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,3,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,0,5,11,11,11,11,5,5,5,5,11,11,11,11,5,11,5,5,5,5,12,5,5,5,0,5,0,11,11,11,11,11,11,11,11,5,11,11,3,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,3,6,3,3,8,3,3,3,6,18,18,3,8,8,8,8,8,3,3,3,6,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,10,5,0,0,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["KeccakConfig","address","impl_expr","keccak_packed_multi","util","word","word_map","KeccakCircuitConfig","KeccakRow","KeccakTable","assign","assign_advice_custom","assign_fixed_custom","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","clone","clone","clone","clone_into","clone_into","clone_into","construct","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dummy_rows","fmt","fmt","fmt","from","from","from","get_keccak_capacity","get_num_keccak_f","get_num_rows_per_round","init","init","init","input_rlc","into","into","into","is_enabled","keccak_phase0","keccak_phase1","keccak_table","load_aux_tables","multi_keccak_phase0","multi_keccak_phase1","new","output_rlc","set_row","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ABSORB_WIDTH_PER_ROW","ABSORB_WIDTH_PER_ROW_BYTES","BIT_COUNT","BIT_SIZE","KECCAK_WIDTH","KECCAK_WIDTH_IN_BITS","NUM_BITS_PER_BYTE","NUM_BITS_PER_WORD","NUM_BYTES_PER_WORD","NUM_BYTES_TO_ABSORB","NUM_BYTES_TO_SQUEEZE","NUM_ROUNDS","NUM_WORDS_TO_ABSORB","NUM_WORDS_TO_SQUEEZE","PartInfo","RATE","RATE_IN_BITS","WordParts","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constraint_builder","deref","deref","deref_mut","deref_mut","drop","drop","eth_types","expression","field_xor","fmt","fmt","from","from","get_absorb_positions","get_degree","get_num_bits_per_lookup","get_rotate_count","init","init","into","into","into_bits","new","pack","pack_part","pack_u64","pack_with_base","parts","rotate","rotate_left","rotate_rev","scatter","target_part_sizes","to_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unpack","vzip","vzip","BaseConstraintBuilder","borrow","borrow_mut","condition","constraints","default","deref","deref_mut","drop","from","init","into","max_degree","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","AccessList","Address","Block","Bytes","Field","H160","H256","H64","Hash","MAX","MAX","Signature","ToAddress","ToBigEndian","ToLittleEndian","ToScalar","ToWord","Transaction","U256","U64","Word","abs_diff","abs_diff","access_list","add","add","add","add","add_assign","add_assign","as_bits","as_bits","as_bits","as_bits","as_bits","as_bits","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_bytes","as_bytes","as_bytes","as_bytes_mut","as_bytes_mut","as_bytes_mut","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes_mut","as_fixed_bytes_mut","as_fixed_bytes_mut","as_mut","as_mut","as_mut","as_mut_bits","as_mut_bits","as_mut_bits","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","as_u128","as_u32","as_u32","as_u64","as_u64","as_usize","as_usize","assign_from_slice","assign_from_slice","assign_from_slice","author","base_fee_per_gas","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","block_hash","block_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","byte","chain_id","checked_add","checked_add","checked_div","checked_div","checked_mul","checked_mul","checked_neg","checked_neg","checked_pow","checked_pow","checked_rem","checked_rem","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","covers","covers","covers","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difficulty","div","div","div","div","div_assign","div_assign","div_mod","div_mod","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp10","exp10","extra_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_big_endian","from_dec_str","from_dec_str","from_little_endian","from_little_endian","from_low_u64_be","from_low_u64_be","from_low_u64_be","from_low_u64_le","from_low_u64_le","from_low_u64_le","from_low_u64_ne","from_low_u64_ne","from_low_u64_ne","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_token","from_token","from_token","from_token","from_tokens","from_tokens","from_tokens","from_tokens","from_uint","from_uint","full_mul","gas","gas_limit","gas_price","gas_target","gas_used","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","input","integer_sqrt","integer_sqrt","into","into","into","into","into","into","into","into","into","into","into_full_block","into_iter","into_iter","into_token","into_token","into_token","into_token","into_tokens","into_tokens","into_tokens","into_tokens","into_uint","into_uint","is_zero","is_zero","is_zero","is_zero","is_zero","leading_zeros","leading_zeros","len_bytes","len_bytes","len_bytes","length","length","length","length","length","length","length","length","logs_bloom","low_u128","low_u32","low_u32","low_u64","low_u64","max_encoded_len","max_encoded_len","max_encoded_len","max_fee_per_gas","max_priority_fee_per_gas","max_value","max_value","mix_hash","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","next_block_base_fee","nonce","nonce","not","not","number","one","one","other","other","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_sub","overflowing_sub","param_type","param_type","param_type","param_type","param_type","parent_hash","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","r","r","random","random","random","random_using","random_using","random_using","randomize","randomize","randomize","randomize_using","randomize_using","randomize_using","receipts_root","recover","recover_from","recover_from_mut","recovery_id","rem","rem","rem","rem","rem_assign","rem_assign","repeat_byte","repeat_byte","repeat_byte","rlp","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","s","s","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_sub","saturating_sub","seal_fields","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr_assign","shr_assign","size","state_root","sub","sub","sub","sub","sub_assign","sub_assign","time","timestamp","to","to_address","to_address","to_be_bytes","to_be_bytes","to_big_endian","to_big_endian","to_fixed_bytes","to_fixed_bytes","to_fixed_bytes","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_le_bytes","to_le_bytes","to_little_endian","to_little_endian","to_low_u64_be","to_low_u64_be","to_low_u64_be","to_low_u64_le","to_low_u64_le","to_low_u64_le","to_low_u64_ne","to_low_u64_ne","to_low_u64_ne","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_scalar","to_scalar","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_vec","to_vec","to_word","to_word","to_word","total_difficulty","trailing_zeros","trailing_zeros","transaction_index","transaction_type","transactions","transactions_root","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_mut_bits","try_as_mut_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncles","uncles_hash","using_encoded","using_encoded","using_encoded","v","v","value","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zero","zero","zero","Expr","and","expr","expr_from_bytes","not","or","pow_of_two","select","sum","xor","expr","value","expr","value","expr","value","expr","value","value_word","expr","value","expr","value"],"q":["zkevm_keccak","","","","","","","zkevm_keccak::keccak_packed_multi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zkevm_keccak::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zkevm_keccak::util::constraint_builder","","","","","","","","","","","","","","","","","zkevm_keccak::util::eth_typeszkevm_keccak::util::expression","","","","","","","","","","zkevm_keccak::util::expression::and","","zkevm_keccak::util::expression::not","","zkevm_keccak::util::expression::or","","zkevm_keccak::util::expression::select","","","zkevm_keccak::util::expression::sum","","zkevm_keccak::util::expression::xor",""],"d":["","Create an <code>Address</code> from a hex string.  Panics on invalid …","Implementation trait <code>Expr</code> for type able to be casted to u64","Keccak packed multi","Util Utility traits, functions used in the crate.","Create a <code>Word</code> from a hex string.  Panics on invalid input.","Create a <code>Word</code> to <code>Word</code> HashMap from pairs of hex strings.  …","KeccakConfig","KeccakRow","Keccak Table, used to verify keccak hashing from RLC’ed …","","","","","","","","","","","","","","","","","Construct a new KeccakTable","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The number of keccak_f’s that can be done in this circuit","","","","","","Byte array input as <code>RLC(reversed(input))</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True when the row is enabled","Witness generation in <code>FirstPhase</code> for a keccak hash digest …","Computes and assigns the input RLC values (but not the …","","","Returns vector of KeccakRow and vector of hash digest …","Computes and assigns the input and output RLC values.","Return a new KeccakCircuitConfig","RLC of the hash result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Description of which bits (positions) a part contains","","","Description of how a word is split into parts","The bit positions of the part","","","","","","","","","","","","","","","","Ethereum and Evm types used to deserialize responses from …","","Calculates a ^ b with a and b field elements","","","Returns the argument unchanged.","Returns the argument unchanged.","The words that absorb data","Get the degree of the circuit from the KECCAK_DEGREE env …","Returns how many bits we can process in a single lookup …","Gets the rotation count in parts","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts bytes into bits","Returns a description of how a word will be split into …","Pack bits in the range [0,BIT_SIZE[ into a sparse keccak …","Decodes the bits using the position data found in the part …","Pack bits stored in a u64 value into a sparse keccak word","Pack bits in the range [0,BIT_SIZE[ into a sparse keccak …","The parts of the word","Rotates a word that was split into parts to the right","Rotates bits left","Rotates a word that was split into parts to the left","Scatters a value into a packed word constant","Returns the size (in bits) of each part size when …","Packs bits into bytes","","","","","","","","","Unpack a sparse keccak word into bits in the range […","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Access list","","The block type returned from RPC calls. This is generic …","Wrapper type around Bytes to deserialize/serialize “0x”…","Trait used to reduce verbosity with the declaration of the …","Fixed-size uninterpreted hash type with 20 bytes (160 …","Fixed-size uninterpreted hash type with 32 bytes (256 …","","Ethereum Hash (256 bits).","Maximum value.","Maximum value.","An ECDSA signature","Trait used to convert a type to a <code>Address</code>.","Trait uset do convert a scalar value to a 32 byte array in …","Trait used to convert a scalar value to a 32 byte array in …","Trait used to define types that can be converted to a 256 …","Trait used to convert a type to a <code>Word</code>.","Details of a signed transaction","Little-endian large integer type 256-bit unsigned integer.","Little-endian large integer type Unsigned 64-bit integer.","Ethereum Word (256 bits).","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","","","","","","","","","","","","","","","","","","","","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","","","","","","","","","","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","","","","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","","","","","","","","","","","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Miner/author’s address. None if pending.","Base fee per unit of gas (if past London)","Return if specific bit is set.","Return if specific bit is set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","Block hash. None when pending.","Block number. None when pending.","","","","","","","","","","","","","","","","","","","","","","Return specific byte.","Return specific byte.","","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Difficulty","","","","","","","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Extra data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a hash type from the given bytes array of fixed …","Returns the argument unchanged.","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Constructs a hash type from the given bytes array of fixed …","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","Constructs a hash type from the given reference to the …","Returns the argument unchanged.","Constructs a hash type from the given bytes array of fixed …","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Sender","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Convert from a decimal string.","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Creates a hash type instance from the given string.","","","Creates a hash type instance from the given string.","Creates a hash type instance from the given string.","","","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","","","","","","","","","","","Multiplies two 256-bit integers to produce full 512-bit …","Gas amount","Gas Limit","Gas Price, null for Type 2 transactions","The target gas usage as per EIP-1559","Gas Used","","","","","","","","","","The transaction’s hash","Hash of the block","","","","","","","","","","","","","","","","","Input data","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this block that only holds transaction hashes …","","","","","","","","","","","","","Returns <code>true</code> if no bits are set.","Whether this is zero.","Whether this is zero.","Returns <code>true</code> if no bits are set.","Returns <code>true</code> if no bits are set.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","","","","","","","","","Logs bloom","Low 2 words (u128)","Conversion to u32","Conversion to u32","Low word (u64)","Low word (u64)","","","","Represents the maximum amount that a user is willing to …","Represents the maximum tx fee that will go to the miner as …","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","Mix Hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The next block’s base fee, it is a function of parent …","The transaction’s nonce","Nonce","","","Block number. None if pending.","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","Captures unknown fields such as additional fields used by …","Captures unknown fields such as additional fields used by …","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","","","","","","Hash of the parent","","","","","","","Fast exponentiation by squaring …","Fast exponentiation by squaring …","ECDSA signature r","R value","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Transactions receipts root hash","Recovers the Ethereum address which was used to sign the …","Recover the sender of the tx from signature","Recover the sender of the tx from signature and set the …","Retrieve the recovery ID.","","","","","","","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","","","","","","","","ECDSA signature s","S Value","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Seal fields","","","","","","","","","","","","","","","","","","","","","","","Size in bytes","State root hash","","","","","","","Parse <code>Self::timestamp</code> into a <code>DateTime&lt;Utc&gt;</code>.","Timestamp","Recipient (None when contract creation)","Convert the type to a <code>Address</code>.","","Convert the value to a 32 byte array in big endian.","Encode the value as byte array in big endian.","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Returns the inner bytes array.","Returns the inner bytes array.","Returns the inner bytes array.","","","","Convert the value to a 32 byte array in little endian.","Encode the value as byte array in little endian.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","","","","","","","","","","","Convert the type to a scalar value.","","","","","","","","","","","Copies and serializes <code>self</code> into a new <code>Vec</code> with the …","Convert the type to a <code>Word</code>.","","","Total difficulty","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Transaction Index. None when pending.","Transaction type, Some(2) for EIP-1559 transaction, …","Transactions","Transactions root hash","","","","","","","","","","","","","","","","","","","","","","","Parses a raw signature which is expected to be 65 bytes …","","","","","","","","","","","","","","","","","","","","","","Uncles’ hashes","Hash of the uncles","","","","ECDSA recovery id","V value","Transferred value","Verifies that signature on <code>message</code> was produced by <code>address</code>","","","","","","","","","","","Returns a new zero-initialized fixed hash.","Zero (additive identity) of this type.","Zero (additive identity) of this type.","Returns a new zero-initialized fixed hash.","Returns a new zero-initialized fixed hash.","Trait that implements functionality to get a constant …","Returns <code>1</code> when <code>expr[0] &amp;&amp; expr[1] &amp;&amp; ... == 1</code>, and returns …","Returns an expression for the type.","Given a bytes-representation of an expression, it computes …","Returns <code>1</code> when <code>b == 0</code>, and returns <code>0</code> otherwise. <code>b</code> needs to …","Returns <code>1</code> when <code>expr[0] || expr[1] || ... == 1</code>, and returns …","Returns 2**by as FieldExt","Returns <code>when_true</code> when <code>selector == 1</code>, and returns …","Returns the sum of the passed in cells","Returns <code>a ^ b</code>. <code>a</code> and <code>b</code> needs to be boolean","Returns an expression that evaluates to 1 only if all the …","Returns the product of all given values.","Returns an expression that represents the NOT of the given …","Returns a value that represents the NOT of the given value.","Returns an expression that evaluates to 1 if any …","Returns the value after passing all given values through …","Returns the <code>when_true</code> expression when the selector is …","Returns the <code>when_true</code> value when the selector is true, …","Returns the <code>when_true</code> word when selector is true, else …","Returns an expression for the sum of the list of …","Returns the sum of the given list of values within the …","Returns an expression that represents the XOR of the given …","Returns a value that represents the XOR of the given value."],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,14,15,2,14,15,2,2,14,15,2,14,15,2,15,14,15,2,14,15,2,14,15,2,14,14,15,2,14,15,2,0,0,0,14,15,2,15,14,15,2,15,0,0,2,2,0,0,2,15,2,14,15,2,14,15,2,14,15,2,14,15,2,14,15,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,27,26,27,26,27,26,27,0,26,27,26,27,26,27,0,0,0,26,27,26,27,0,0,0,0,26,27,26,27,0,27,0,0,0,0,27,0,0,0,0,0,0,26,27,26,27,26,27,26,27,0,26,27,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,36,33,34,37,38,44,40,0,0,0,0,0,0,0,0,0,33,34,0,0,0,0,0,0,0,0,0,0,33,34,43,33,33,34,34,33,34,36,33,34,37,38,40,36,33,34,37,38,40,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,33,34,37,38,40,36,37,38,40,33,33,34,33,34,33,34,36,37,38,45,45,33,34,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,33,34,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,43,43,36,33,34,37,38,43,44,40,40,45,46,36,33,34,37,38,43,44,40,45,46,33,34,43,33,34,33,34,33,34,33,34,33,34,33,34,33,34,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,40,36,37,38,36,36,33,33,33,33,34,34,37,37,37,37,38,38,38,38,43,44,44,40,40,46,33,37,38,33,37,38,33,37,38,36,33,34,37,38,43,44,40,45,36,33,34,37,38,43,44,40,40,45,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,45,33,33,34,34,33,34,33,34,36,33,34,37,38,43,44,40,45,46,36,33,33,34,37,37,38,38,44,40,40,46,36,37,38,40,36,37,38,40,36,33,34,37,38,43,44,40,40,40,40,45,46,33,34,45,36,36,36,36,33,33,33,33,34,34,34,34,37,37,37,37,38,38,38,38,43,44,40,40,40,45,46,46,36,36,36,36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,37,37,37,37,37,38,38,38,38,38,43,44,44,40,40,40,40,40,45,45,46,43,33,34,33,34,33,34,36,37,38,36,37,38,36,37,38,36,37,38,36,33,34,37,38,40,46,33,34,33,37,38,40,33,37,38,40,36,38,33,43,45,43,45,45,36,33,34,37,38,43,44,40,46,43,45,36,37,38,36,37,38,36,33,34,37,38,43,44,40,45,46,43,33,34,36,33,34,37,38,43,44,40,45,46,45,40,40,33,37,38,40,33,37,38,40,36,38,36,33,34,37,38,33,34,36,37,38,36,33,34,37,38,44,40,46,45,33,33,34,33,34,33,37,38,43,43,33,34,45,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,45,43,45,33,34,45,33,34,43,45,33,34,33,34,33,34,33,34,33,34,33,34,37,38,40,45,36,33,34,37,38,40,33,34,43,46,36,37,38,36,37,38,36,37,38,36,37,38,45,46,43,43,46,33,33,34,34,33,34,36,37,38,43,36,33,34,37,38,44,43,46,33,34,33,34,33,34,45,36,33,34,37,38,43,44,40,45,46,33,33,34,34,33,34,33,33,34,34,33,34,45,45,33,33,34,34,33,34,45,45,43,93,33,94,33,33,34,36,37,38,33,37,38,95,33,33,34,36,37,38,36,37,38,36,37,38,36,33,34,37,38,43,44,40,45,46,96,83,33,36,33,34,37,38,40,46,40,46,97,83,86,45,33,34,43,43,45,45,36,33,34,37,38,40,36,37,38,36,33,33,33,33,33,34,37,38,43,44,40,45,46,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,45,45,33,37,38,43,46,43,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3]],[[3,[5,[4]],6,[7,[1]]],[[9,[8,1]]]],[[3,[5,[10]],6,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],11],[[[14,[[0,[12,13]]]]],[[14,[[0,[12,13]]]]]],[15,15],[[[2,[12]]],[[2,[12]]]],[[]],[[]],[[]],[16,15],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6,[[17,[[14,[13]]]]]],[[[14,[[0,[18,13]]]],19],20],[[15,19],20],[[[2,[18]],19],20],[[]],[[]],[[]],[6,6],[6,6],[[],6],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],0,[[17,17]],[[3,15,[7,[1]],17,6]],0,[[[2,[1]]],[[22,[21]]]],[[[23,[6]]]],[[3,15,24,[7,[1]],17]],[[16,11],[[2,[1]]]],0,[[[2,[1]],3,6,14]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[[],25],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],0,[6],[6],[6],[6],[6],[6],0,0,[[1,1],1],[[26,19],20],[[27,19],20],[[]],[[]],[[],17],[[],6],[6,6],[[6,6],6],[[],6],[[],6],[[]],[[]],[[],[[17,[28]]]],[[6,6,29],27],[[],1],[26,30],[30,1],[6,1],0,[[17,6,6],17],[6],[[17,6,6],17],0,[6,[[17,[6]]]],0,[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[1],[[]],[[]],0,[[]],[[]],0,0,[[],[[32,[31]]]],[6],[6],[6],[[]],[[],6],[[]],0,[[],22],[[],22],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33],33],[[34,34],34],0,[33,33],[33,33],[34,34],[34,34],[[33,33]],[[34,34]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[]],[[]],[[]],[[]],[[]],[[]],[36],[37],[38],[36],[37],[38],[36],[37],[38],[36],[37],[38],[36],[37],[38],[[],35],[[],35],[[],35],[[]],[[]],[[]],[36,28],[37,28],[38,28],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[36,28],[37,28],[38,28],[36],[33],[34],[37],[38],[40],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[33,41],[33,42],[34,42],[33,30],[34,30],[33,6],[34,6],[36],[37],[38],0,0,[[33,6],29],[[34,6],29],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[33,6],[34,6],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,6],28],[[34,6],28],0,[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[33,[[23,[33]]]],[34,[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[36,36],[33,33],[34,34],[37,37],[38,38],[43,43],[44,44],[40,40],[45,45],[46,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],47],[[33,33],47],[[34,34],47],[[37,37],47],[[38,38],47],[[40,40],47],[[36,36],29],[[37,37],29],[[38,38],29],[48,[[22,[36,49]]]],[[],[[22,[36,50]]]],[[],[[22,[33,51]]]],[[],[[22,[33,50]]]],[52,[[22,[33,53]]]],[48,[[22,[33,49]]]],[48,[[22,[34,49]]]],[[],[[22,[34,50]]]],[[],[[22,[37,51]]]],[48,[[22,[37,49]]]],[52,[[22,[37,53]]]],[[],[[22,[37,50]]]],[52,[[22,[38,53]]]],[48,[[22,[38,49]]]],[[],[[22,[38,50]]]],[[],[[22,[38,51]]]],[48,[[22,[43,49]]]],[[],[[22,[44,50]]]],[48,[[22,[44,49]]]],[52,[[22,[40,53]]]],[[],[[22,[40,50]]]],[[],[[22,[46,50]]]],[[],[[22,[51]]]],[[],[[22,[51]]]],[[],[[22,[51]]]],[42,[[22,[51]]]],[42,[[22,[51]]]],[42,[[22,[51]]]],[42,[[22,[51]]]],[42,[[22,[51]]]],[42,[[22,[51]]]],[[],36],[[],33],[[],34],[[],37],[[],38],[[],43],[[],44],[[],40],[[],45],[6],[6],[6],[6],[6],[6],[6],[40],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[22,[36]]]],[[],[[22,[33]]]],[[],[[22,[34]]]],[[],[[22,[37]]]],[[],[[22,[38]]]],[[],[[22,[43]]]],[[],[[22,[44]]]],[[],[[22,[40]]]],[[],[[22,[45]]]],[[],[[22,[46]]]],0,[33,33],[33,33],[34,34],[34,34],[33],[34],[[33,33]],[[34,34]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[36,54]],[33,[[17,[28,55]]]],[[33,54]],[[34,54]],[37,[[17,[28,55]]]],[[37,54]],[38,[[17,[28,55]]]],[[38,54]],[[44,54]],[40,[[17,[28,55]]]],[[40,54]],[[46,54]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],29],[[33,33],29],[[34,34],29],[[37,37],29],[[38,38],29],[[43,43],29],[[44,44],29],[40,29],[[40,56],29],[[40,40],29],[[40,17],29],[[45,45],29],[[46,46],29],[6,33],[6,34],0,[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[43,19],[[22,[57]]]],[[44,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[45,19],[[22,[57]]]],[[46,19],[[22,[57]]]],[[46,19],[[22,[57]]]],[[],36],[[]],[[],36],[[],36],[58,33],[28,33],[[],33],[59,33],[60,33],[42,33],[61,33],[62,33],[[]],[63,33],[64,33],[[],33],[65,33],[[],33],[30,33],[6,33],[41,33],[33,33],[66,33],[67,33],[68,33],[34,34],[60,34],[65,34],[6,34],[64,34],[59,34],[[]],[58,34],[42,34],[30,34],[67,34],[[],34],[[],34],[28,34],[66,34],[[],34],[[]],[38,37],[[],37],[[],37],[[],37],[[],38],[37,38],[[],38],[[]],[[],38],[[]],[[]],[[[17,[69,55]]],44],[56,40],[[],40],[[]],[[[17,[28,55]]],40],[[],40],[[]],[[[45,[43]]],[[45,[38]]]],[[]],0,[[],33],[[],34],[65,[[22,[33,70]]]],[65,[[22,[34,70]]]],[[],33],[[],34],[30,36],[30,37],[30,38],[30,36],[30,37],[30,38],[30,36],[30,37],[30,38],[[],36],[[],37],[[],38],[65,[[22,[36,71]]]],[65,[[22,[33]]]],[65,[[22,[34]]]],[65,[[22,[37,71]]]],[65,[[22,[38,71]]]],[65,[[22,[40]]]],[65,[[22,[46]]]],[[65,42],[[22,[33,72]]]],[[65,42],[[22,[34,72]]]],[73,[[22,[33,74]]]],[73,[[22,[37,74]]]],[73,[[22,[38,74]]]],[73,[[22,[40,74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[34,36],[33,38],[[33,33],75],0,0,0,[45,33],0,[36],[33],[34],[37],[38],[43,38],[44],[40],[46],0,0,[36],[37],[38],[36],[37],[38],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[38]],[17,[43,55]]],[[45,[43]]]],[40],[40],[33,73],[37,73],[38,73],[40,73],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[36,34],[38,33],[36,29],[33,29],[34,29],[37,29],[38,29],[33,42],[34,42],[[],6],[[],6],[[],6],[36,6],[33,6],[34,6],[37,6],[38,6],[44,6],[40,6],[46,6],0,[33,41],[33,42],[34,42],[33,30],[34,30],[[],6],[[],6],[[],6],0,0,[[],33],[[],34],0,[[33,30],33],[[33,66],33],[[33,59],33],[[33,58],33],[[33,58],33],[[33,33],33],[[33,59],33],[[33,67],33],[[33,67],33],[[33,64],33],[[33,60],33],[[33,64],33],[[33,30],33],[[33,59],33],[[33,6],33],[[33,6],33],[[33,28],33],[[33,59],33],[[33,33],33],[[33,58],33],[[33,30],33],[[33,42],33],[[33,42],33],[[33,28],33],[[33,60],33],[[33,58],33],[[33,6],33],[[33,33],33],[[33,60],33],[[33,42],33],[[33,42],33],[[33,30],33],[[33,28],33],[[33,64],33],[[33,66],33],[[33,67],33],[[33,67],33],[[33,6],33],[[33,60],33],[[33,28],33],[[33,64],33],[[33,66],33],[[33,66],33],[[33,33],33],[[34,64],34],[[34,28],34],[[34,42],34],[[34,28],34],[[34,64],34],[[34,64],34],[[34,58],34],[[34,34],34],[[34,34],34],[[34,30],34],[[34,58],34],[[34,60],34],[[34,66],34],[[34,6],34],[[34,60],34],[[34,6],34],[[34,59],34],[[34,67],34],[[34,42],34],[[34,67],34],[[34,58],34],[[34,67],34],[[34,58],34],[[34,59],34],[[34,60],34],[[34,66],34],[[34,59],34],[[34,64],34],[[34,30],34],[[34,67],34],[[34,60],34],[[34,66],34],[[34,42],34],[[34,34],34],[[34,28],34],[[34,28],34],[[34,30],34],[[34,34],34],[[34,59],34],[[34,6],34],[[34,42],34],[[34,6],34],[[34,66],34],[[34,30],34],[[33,58]],[[33,59]],[[33,33]],[[33,66]],[[33,42]],[[33,67]],[[33,28]],[[33,64]],[[33,30]],[[33,60]],[[33,6]],[[34,64]],[[34,28]],[[34,67]],[[34,34]],[[34,42]],[[34,60]],[[34,59]],[[34,58]],[[34,6]],[[34,66]],[[34,30]],[45,[[23,[33]]]],0,0,[33,33],[34,34],0,[[],33],[[],34],0,0,[[33,33]],[[34,34]],[[33,33]],[[34,34]],[33],[34],[[33,33]],[[34,34]],[[33,33]],[[34,34]],[[],76],[[],76],[[],76],[[],76],[[],76],0,[[36,36],[[23,[47]]]],[[33,33],[[23,[47]]]],[[34,34],[[23,[47]]]],[[37,37],[[23,[47]]]],[[38,38],[[23,[47]]]],[[40,40],[[23,[47]]]],[[33,33],33],[[34,34],34],0,0,[[],36],[[],37],[[],38],[[],36],[[],37],[[],38],[36],[37],[38],[36],[37],[38],0,[46,[[22,[37,77]]]],[43,[[22,[37,77]]]],[43,[[22,[37,77]]]],[46,[[22,[78,77]]]],[33,33],[33,33],[34,34],[34,34],[33],[34],[28,36],[28,37],[28,38],[43,40],[[36,79]],[[33,79]],[[34,79]],[[37,79]],[[38,79]],[[44,79]],0,0,[[33,33],33],[[34,34],34],[[33,33],33],[[34,34],34],[[33,33],33],[[34,34],34],0,[36,22],[33,22],[34,22],[37,22],[38,22],[43,22],[44,22],[40,22],[45,22],[46,22],[33,33],[33,33],[34,34],[34,34],[33],[34],[33,33],[33,33],[34,34],[34,34],[33],[34],0,0,[33,33],[33,33],[34,34],[34,34],[[33,33]],[[34,34]],[45,[[22,[[81,[80]],82]]]],0,0,[[],83],[33,83],[[]],[33],[33],[34],[36],[37],[38],[[],[[17,[28,55]]]],[[],[[17,[28,55]]]],[[],[[17,[28,55]]]],[[]],[33],[33],[34],[36,30],[37,30],[38,30],[36,30],[37,30],[38,30],[36,30],[37,30],[38,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[83,[[23,[1]]]],[33,[[23,[1]]]],[[],84],[[],84],[[],84],[[],84],[[],84],[[],84],[[],84],[40,[[17,[28,55]]]],[46,[[17,[28,55]]]],[[],85],[83,85],[86,85],0,[33,42],[34,42],0,0,0,0,[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],22],[75,[[22,[33,88]]]],[75,[[22,[33,88]]]],[89,[[22,[33]]]],[90,[[22,[33]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],[[22,[46]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,[33],[37],[38],0,0,0,[46,[[22,[77]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],33],[[],34],[[],37],[[],38],0,0,[[],91],[[],[[91,[13]]]],0,0,[6,13],0,0,0,[24,[[91,[13]]]],[[[17,[13]]],13],[[[92,[13]]],[[91,[13]]]],[13,13],[24,[[91,[13]]]],[[[17,[13]]],13],[[[91,[13]],[91,[13]],[91,[13]]],[[91,[13]]]],[[13,13,13],13],[13],[24,[[91,[13]]]],[[],13],[[[92,[13]],[92,[13]]],[[91,[13]]]],[[13,13],13]],"p":[[8,"Field"],[3,"KeccakCircuitConfig"],[3,"Region"],[3,"Advice"],[3,"Column"],[15,"usize"],[3,"Value"],[4,"Assigned"],[3,"AssignedCell"],[3,"Fixed"],[3,"Challenge"],[8,"Clone"],[8,"FieldExt"],[3,"KeccakRow"],[3,"KeccakTable"],[3,"ConstraintSystem"],[3,"Vec"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"Result"],[4,"Option"],[8,"IntoIterator"],[3,"TypeId"],[3,"PartInfo"],[3,"WordParts"],[15,"u8"],[15,"bool"],[15,"u64"],[8,"Default"],[3,"BaseConstraintBuilder"],[3,"U256"],[3,"U64"],[3,"BitSlice"],[3,"H64"],[3,"H160"],[3,"H256"],[4,"Error"],[3,"Bytes"],[15,"u128"],[15,"u32"],[3,"Transaction"],[3,"AccessList"],[3,"Block"],[3,"Signature"],[4,"Ordering"],[3,"Rlp"],[4,"DecoderError"],[4,"DecodeError"],[3,"Error"],[8,"AsRef"],[4,"AbiError"],[8,"BufMut"],[3,"Global"],[3,"Bytes"],[3,"Error"],[15,"i8"],[15,"i16"],[15,"u16"],[4,"Chain"],[4,"Numeric"],[3,"U128"],[15,"isize"],[15,"str"],[15,"i64"],[15,"i32"],[15,"i128"],[3,"AccessListItem"],[4,"FromDecStrErr"],[4,"FromHexError"],[3,"FromStrRadixErr"],[4,"Token"],[3,"InvalidOutputType"],[3,"U512"],[4,"ParamType"],[4,"SignatureError"],[3,"Id"],[3,"RlpStream"],[3,"Utc"],[3,"DateTime"],[4,"TimeError"],[6,"Address"],[3,"String"],[6,"Word"],[6,"Hash"],[4,"BitSpanError"],[4,"Error"],[3,"I256"],[4,"StringifiedNumeric"],[4,"Expression"],[8,"Expr"],[8,"ToAddress"],[8,"ToBigEndian"],[8,"ToLittleEndian"],[8,"ToScalar"],[8,"ToWord"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
